// backend/routes/api/index.js
const router = require('express').Router();
const { restoreUser, requireAuth } = require('../../utils/auth.js');
const sessionRouter = require('./session.js')
const usersRouter = require('./users.js')
const groupsRouter = require('./groups.js')
const {Venue, Group, GroupImage, User, Membership, EventImage, Event} = require("../../db/models")
const eventsRouter = require("./events.js")
const {check, validationResult}=require("express-validator")

let editVenueValidations=[
    check("address")
        .exists()
        .notEmpty()
        .withMessage("Street address is required"),
    check("city")
        .exists()
        .notEmpty()
        .withMessage("City is required"),
    check("state")
        .exists()
        .notEmpty()
        .withMessage("State is required"),
    check("lat")
        .isFloat({min:-90, max:90})
        .withMessage("Latitude must be within -90 and 90"),
        check("lng")
        .isFloat({min:-180, max:180})
        .withMessage("Longitude must be within -180 and 180"),
]

router.use(restoreUser);

router.use('/session', sessionRouter)

router.use('/users', usersRouter)

router.use('/groups', groupsRouter)

router.use("/events", eventsRouter)

router.post('/test', (req, res) =>{
    res.json({user: {
        id,
        firstName,
        lastName,
        email,
        userName
    }})})

//Edit a venue by id
router.put("/venues/:venueId", requireAuth, editVenueValidations, async(req,res,next)=>{
    let result = validationResult(req)
    let errors={}
    // console.log("result errors:",result.errors)
    if(result.errors.length>0){
        result.errors.forEach(e=>{errors[e.path]=e.msg})
        res.statusCode=400
        return res.json({
            "message": "Bad Request",
            "errors": errors
        })
    }
    let ven = await Venue.findOne({where:{id: req.params.venueId}})
    if(!ven){
        res.statusCode=404
        return res.json({message: "Venue couldn't be found"})
    }
    let mem = await Membership.findOne({where:{userId:req.user.dataValues.id,
    groupId:ven.groupId}})
    // try{
        let group = await Group.findOne({where:{id:ven.groupId}})
        //authorization
        let auth = false
        if(group.organizerId===req.user.dataValues.id){auth=true}
        if(mem)
        {if(mem.status==="co-host"){auth=true}}
            if(auth===false){
            res.statusCode=403
            return res.json({
                "message": "Forbidden"
            })
        }
        
        let {address, city, state, lat, lng}=req.body
        if(address){ven.address=address}
        if(city){ven.city=city}
        if(state){ven.state=state}
        if(lat){ven.lat=lat}
        if(lng){ven.lng=lng}
        await ven.save()

        let payload = {
            id: ven.id,
            groupId: ven.groupId,
            address: ven.address,
            city: ven.city,
            state: ven.state,
            lat: ven.lat,
            lng: ven.lng
        }
        
        res.statusCode=200
        return res.json(payload)
    // }catch(err){res.statusCode=400
    // return res.json({
    //     "message": "Bad Request", // (or "Validation error" if generated by Sequelize),
    //     "errors": {
    //       "address": "Street address is required",
    //       "city": "City is required",
    //       "state": "State is required",
    //       "lat": "Latitude must be within -90 and 90",
    //       "lng": "Longitude must be within -180 and 180",
    //     }
    //   })}
    })

    //delete group image by id
    router.delete("/group-images/:imageId", requireAuth, async(req,res)=>{
        let groupImage = await GroupImage.findOne({where:{id:req.params.imageId},
        include: Group})
        if(!groupImage){res.statusCode=404
        return res.json({
            "message": "Group Image couldn't be found"
          })}

        let group = await Group.findOne({where:{id:groupImage.Group.id},
        include: Membership})

        //authorize
        let auth  = false
        if(group.organizerId===req.user.dataValues.id){auth=true}
        group.Memberships.forEach((member)=>{
            if(member.userId===req.user.dataValues.id&&member.status==="co-host")
            {auth=true}
        })
        if(auth===false){
            res.statusCode=403
            return res.json({
                "message": "Forbidden"
            })
        }  
        await groupImage.destroy()

        res.statusCode=200
        return res.json({message:"Successfully deleted"})
    })

    //delete event image by id
    router.delete("/event-images/:imageId", requireAuth, async(req,res)=>{
       
        let eventImage = await EventImage.findOne({where:{id:req.params.imageId},
            include: [Event]})
            
            // console.log("HITTING")
            
            if(!eventImage){res.statusCode=404
                return res.json({message: "Event Image couldn't be found"})}
                
                let group = await Group.findOne({where:{id:eventImage.Event.groupId}})
                let mem = await Membership.findOne({where:{userId:req.user.dataValues.id,
                groupId:eventImage.Event.groupId}})
                    
                    // console.log("currId:",req.user.dataValues.id, "organizerId:",group.organizerId,"group",group)
                    
                    
                    //authorize
                    let auth = false
        if(group){
            if(group.organizerId===req.user.dataValues.id){auth=true}}
            if(mem){
            if(mem.userId===req.user.dataValues.id&&mem.status==="co-host")
            {auth=true}
        }
        if(auth===false){
            res.statusCode=403
            return res.json({
                "message": "Forbidden"
            })
        }  
        
        await eventImage.destroy()

        res.statusCode=200
        return res.json({message: "Successfully deleted"})
    })
    
    module.exports = router;